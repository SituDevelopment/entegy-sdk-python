from entegywrapper.entegySchemas.profile import (
    Profile,
    ProfileCreate,
    ProfileIdentifier
)

from typing import Generator


def all_profiles(
    self,
    *,
    params: dict = {}
) -> Generator[list[Profile], None, None]:
    """
    Yields all user profiles in blocks generated by the Entegy API's pagination.

    Parameters
    ----------
        `params` (`dict`, optional): any parameters to filter the returned profiles by; defaults to `{}`

    Yields
    ------
        `Generator[list[Profile], None, None]`: paginated blocks of user profiles
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "pagination": {
            "start": 0,
            "limit": 1000
        }
    }
    data.update(params)

    response = self.post(
        self.api_endpoint + "/v2/Profile/All",
        headers=self.headers,
        data=data
    )
    yield response["profiles"]

    while response["pagination"]["start"] + response["pagination"]["limit"] \
            < response["pagination"]["count"]:
        data["pagination"]["start"] += data["pagination"]["limit"]

        response = self.post(
            self.api_endpoint + "/v2/Profile/All",
            headers=self.headers,
            data=data
        )
        yield response["profiles"]


def get_profile(
    self,
    *,
    profile_id: str | None = None,
    external_reference: str | None = None,
    badge_reference: str | None = None,
    internal_reference: str | None = None,
    params: dict = {},
) -> Profile:
    """
    Gets the user profile specified by the given identifier

    Parameters
    ----------
        `profile_id` (`str`, optional): the profileId of the profile to get; defaults to `None`
        `external_reference` (`str`, optional): the externalReference of the profile to get; defaults to `None`
        `badgeReference` (`str`, optional): the badgeReference of the profile to get; defaults to `None`
        `internalReference` (`str`, optional): the internalReference of the profile to get; defaults to `None`
        `params` (`dict`, optional): any parameters to filter the returned profile by; defaults to `{}`

    Returns
    -------
        `Profile`: the user profile specified by the given identifier
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "profileId": profile_id
    }

    if external_reference is not None:
        data["externalReference"] = external_reference
    elif badge_reference is not None:
        data["badgeReference"] = badge_reference
    elif internal_reference is not None:
        data["internalReference"] = internal_reference

    data.update(params)

    response = self.post(
        self.api_endpoint + "/v2/Profile/",
        headers=self.headers,
        data=data
    )

    return response["profile"]


def delete_profile(self, profile_id: str):
    """
    Deletes the user profile specified by the given identifier.

    Parameters
    ----------
        `profile_id` (`str`): the profileId of the profile to delete
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "profileId": profile_id
    }

    self.delete(
        self.api_endpoint + "/v2/Profile/Delete",
        headers=self.headers,
        data=data
    )


def create_profile(self, profile_object: ProfileCreate) -> str:
    """
    Creates the given profile within the Entegy project, returning the newly
    created profileId.

    Parameters
    ----------
        `profile_object` (`ProfileCreate`): a profile object representing the profile to create

    Returns
    -------
        `str`: profileId of the newly created profile
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "profile": profile_object
    }

    response = self.post(
        self.api_endpoint + "/v2/Profile/Create",
        headers=self.headers,
        data=data
    )

    return response["profileId"]


def update_profile(self, profile_id: str, profile_object: Profile):
    """
    Update the user profile specified by the given identifier using the fields
    in the given profile object.

    Parameters
    ----------
        `profile_id` (`str`): the profileId of the profile to update
        `profile_object` (`Profile`): the profile fields to update
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "profileId": profile_id,
        "profile": profile_object
    }

    self.post(
        self.api_endpoint + "/v2/Profile/Update",
        headers=self.headers,
        data=data
    )


def sync_profiles(
    self,
    update_reference_type: ProfileIdentifier,
    profiles: list[Profile],
    *,
    group_by_first_profile: bool = False
) -> list[dict[str, str | bool]]:
    """
    Updates or creates profiles in bulk.

    Parameters
    ----------
        `update_reference_type` (`Identifier`): the identifier to use to match profiles for updating
        `profiles` (`list[Profile]`): the list of profiles to create or update
        `group_by_first_profile` (`bool`, optional): whether the parent profile of all profiles in this sync should be set to the first profile in the profiles list (except the first profile itself, which will be set to have no parent); defaults to `False`

    Returns
    -------
        `list[dict[str, Any]]`: profileIds and `newProfile` flags for each profile in the given list
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "updateReferenceType": update_reference_type,
        "profiles": profiles,
        "groupByFirstProfile": group_by_first_profile
    }

    response = self.post(
        self.api_endpoint + "/v2/Profile/Sync",
        headers=self.headers,
        data=data
    )

    return response["results"]


def send_welcome_email(self, profile_id: str):
    """
    Re-sends the welcome email for a given profile on a given project.

    Parameters
    ----------
        `profile_id` (`str`): the profileId of the profile to update
    """
    data = {
        "projectId": self.project_id,
        "apiKey": self.get_key(),
        "profileId": profile_id
    }

    self.post(
        self.api_endpoint + "/v2/Profile/SendWelcomeEmail",
        headers=self.headers,
        data=data
    )
